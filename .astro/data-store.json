[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.2","content-config-digest","f7df7ccc3857cfb0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://rossng.eu\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{\"/2020/04/11/my-first-llvm-program.html\":\"/posts/2020-04-11-my-first-llvm-program\",\"/projects/2018/08/10/thesis-free-trade.html\":\"/posts/2018-08-10-free-trade\",\"/projects/2017/06/05/loan-shark.html\":\"/posts/2017-06-05-loan-shark\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,21,22,30,31,39,40,48,49,57,58,66,67],"2017-06-05-loan-shark",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":14,"date":15},"Loan Shark",["Date","2017-06-05T00:00:00.000Z"],"import { Image } from \"astro:assets\";\nimport loanShark1 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-1.png\";\nimport loanShark2 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-2.png\";\nimport loanShark3 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-3.png\";\nimport loanShark4 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-4.png\";\nimport loanShark5 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-5.png\";\nimport loanShark6 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-6.png\";\nimport loanShark7 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-7.png\";\nimport loanShark8 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-8.png\";\nimport loanShark9 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-9.png\";\nimport loanShark10 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-10.png\";\nimport loanShark11 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-11.png\";\nimport loanShark12 from \"@assets/posts/2017-06-05-loan-shark/loan-shark-12.png\";\nimport loanSharkLogo from \"@assets/posts/2017-06-05-loan-shark/loan-shark-logo.png\";\nimport vulcanGamesLogo from \"@assets/posts/2017-06-05-loan-shark/vulcan-games-logo.png\";\n\nAs part of the computer science course at the University of Bristol, I built a game over the span of a year with a team of six people. It was tonnes of fun and one of the best things about the degree programme at Bristol.\n\nLoan Shark is an asymmetric, networked multiplayer VR diving game. Several players work as a team to retrieve treasure from a wreck at the bottom of the ocean while an angry shark - controlled by the player in VR - hunts them down. Loan Shark features numerous graphical effects, integrated voice chat, motion-captured animation, procedurally generated mazes and support for the Myo gesture control armband.\n\nI wish I had taken some screen recordings, but my laptop was too slow to record at a decent frame rate while actually running the game.\n\n\u003CImage src={loanShark1} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark2} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark3} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark4} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark5} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark6} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark7} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark8} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark9} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark10} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark11} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanShark12} alt=\"Loan Shark screenshot\" />\n\n\u003CImage src={loanSharkLogo} alt=\"Loan Shark logo\" />\n\n\u003CImage src={vulcanGamesLogo} alt=\"Vulcan Games logo\" />\n\nFun fact: the team is actually named after a kind of lettuce.","src/content/posts/2017-06-05-loan-shark.mdx","691cb3287603e518","2017-06-05-loan-shark.mdx",true,"2024-09-01-mesh-cutting",{"id":21,"data":23,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":20},{"title":24,"date":25},"Story of a bug: mesh cutting\n",["Date","2024-09-01T00:00:00.000Z"],"import { Image } from \"astro:assets\";\nimport example1 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-example-01.svg\";\nimport working1 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-working-01.svg\";\nimport working2 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-working-02.svg\";\nimport working3 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-working-03.svg\";\nimport working4 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-working-04.svg\";\nimport working5 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-working-05.svg\";\nimport working6 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-working-06.svg\";\nimport failing1 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-failing-01.svg\";\nimport failing2 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-failing-02.svg\";\nimport failing3 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-failing-03.svg\";\nimport failing4 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-failing-04.svg\";\nimport failing5 from \"@assets/posts/2024-09-01-mesh-cutting/mesh-cutting-failing-05.svg\";\n\nNote: I came across this blog post in my drafts folder from years back. It's one of the fun things I did while working at 3Shape.\n\nThis is a bug I found in an algorithm for cutting a [triangle mesh](https://en.wikipedia.org/wiki/Triangle_mesh) by a [polyline](https://en.wikipedia.org/wiki/Polygonal_chain). Let's clarify each of those terms. A triangle mesh is a surface defined by a series of triangles connected at their edges or vertices. A polyline is essentially an ordered sequence of points in 3D space.\n\n\u003CImage src={example1} alt=\"The mesh cutting algorithm\" />\n\nThe basic idea of the algorithm was that each point along the polyline could be mapped to a vertex on the mesh. This could then be turned into a contiguous path of edges along the mesh, completely bisecting it. For a closed mesh, this would have to be a circular path. Then it would be possible to find all facets on one side of the path by simply flood-filling neighbouring facets.\n\n## A working case\n\nHere's an example of the algorithm in its working state.\n\n\u003CImage src={working1} alt=\"An example tri mesh and a polyline to cut it\" />\n\nWe start with the mesh and the polyline (red) that we want to use for cutting. We need to convert this into a path that actually sits on the mesh, so let's map each polyline vertex to the nearest mesh vertex.\n\n\u003CImage src={working2} alt=\"Mapping the polyline to the nearest vertices\" />\n\nThis image shows those nearest vertices as red dots. One thing you might observe is that neighbouring _polyline_ vertices do not necessarily result in neighbouring _mesh_ vertices. In order to generate a contiguous path on the mesh we will have to find a path between **a** and **b**, for example.\n\nIt's pretty easy to find a reasonable path (green) by using (e.g.) Dijkstra's algorithm.\n\n\u003CImage src={working3} alt=\"Filling in the gaps of the path on the mesh\" />\n\nNow we have a path that sits exactly on the mesh and subdivides it. The next step is to pick a single facet, perhaps on a specific side of the path.\n\n\u003CImage\n  src={working4}\n  alt=\"Choosing a facet on one side of the subdivision path\"\n/>\n\nFinally, we can flood fill from this facet. Our flooding condition is that we must not cross the subdivision path (green).\n\n\u003CImage\n  src={working5}\n  alt=\"Result of flood-filling the facets on one side of the path\"\n/>\n\nNow that we've found the facets on one side of the path, we can e.g. keep them and discard the rest.\n\n\u003CImage\n  src={working6}\n  alt=\"Result of flood-filling the facets on one side of the path\"\n/>\n\n## What went wrong?\n\nIn some cases, the algorithm wouldn't cut the mesh as expected. The flood fill would somehow flood every facet on the mesh, causing the entire mesh to be retained during the cutting process.\n\nWhy did this happen? Well, let's consider a slightly different cutting polyline.\n\n\u003CImage\n  src={failing1}\n  alt=\"The same mesh with a slightly different cutting polyline\"\n/>\n\nIn this case, we end up selecting slightly different initial vertices on the mesh.\n\n\u003CImage\n  src={failing2}\n  alt=\"The closest mesh vertices to the new polyline vertices\"\n/>\n\nThen something interesting happens. When we find the shortest path between **a** and **b** and then between **b** and **c**, they turn out to both go through the same point. We have a (short!) loop in our cutting path.\n\n\u003CImage\n  src={failing3}\n  alt=\"The shortest path connecting the vertices - now with a loop\"\n/>\n\nAll seems fine for now though. Let's start the flood filling.\n\n\u003CImage\n  src={failing4}\n  alt=\"Beginning the flood filling with the new subdivision path\"\n/>\n\n\u003CImage src={failing5} alt=\"The incorrect result of cutting\" />\n\nUh oh! Something has gone badly wrong.\n\nIt turns out that the code for deciding whether to flood fill a facet looked something like this.\n\n```\nprocedure can_flood_fill(facet, neighbour_facet, cutting_path) returns bool\n  (v1, v2) ← shared_vertices(facet, neighbour_facet)\n\n  i1 ← index_of(cutting_path, v1)\n  i2 ← index_of(cutting_path, v2)\n\n  // Can only flood fill if the vertices are not neighbours along the cutting path.\n  return abs(i1 - i2) ≠ 1\n```\n\nCan you see the problem?\n\nThe answer: this code implicitly assumes that the cutting path contains no loops. If the same vertex appears more than once, it will only compare to the index where that vertex _first_ appeared in the list. So it's possible to find cases where the condition reports that the vertices are not neighbours in the path, but they actually are.","src/content/posts/2024-09-01-mesh-cutting.mdx","43eb6d66f139dfb8","2024-09-01-mesh-cutting.mdx","2018-08-10-free-trade",{"id":30,"data":32,"body":35,"filePath":36,"digest":37,"legacyId":38,"deferredRender":20},{"title":33,"date":34},"Free Trade: Composable Smart Contracts",["Date","2018-08-10T00:00:00.000Z"],"import { Image } from \"astro:assets\";\nimport freeTrade from \"@assets/posts/2018-08-10-free-trade/free-trade.png\";\nimport dappScreenshot from \"@assets/posts/2018-08-10-free-trade/dapp-screenshot.png\";\nimport dappStack from \"@assets/posts/2018-08-10-free-trade/dapp-stack.png\";\n\nI've finally got around to publishing my masters thesis in computer science from the University of Bristol.\n\n**Quick link:** [Free Trade: Composable Smart Contracts](https://www.researchgate.net/publication/326693413_Free_Trade_Composable_Smart_Contracts)\n\n### Talking about contracts\n\nIn 2000, Simon Peyton Jones et al. proposed a [new combinator language](https://www.microsoft.com/en-us/research/publication/composing-contracts-an-adventure-in-financial-engineering/) for describing financial contracts. In fact, they appear to have thought this was such a good idea that Peyton Jones and Eber went on to redesign the language and write a [book chapter](https://www.microsoft.com/en-us/research/wp-content/uploads/2000/09/pj-eber.pdf) about it.\n\n\u003Ca href=\"https://www.researchgate.net/publication/326693413_Free_Trade_Composable_Smart_Contracts\">\n  \u003CImage src={freeTrade} alt=\"Screenshot from the thesis.\" />\n\u003C/a>\n\nThis expressive domain-specific language was designed to improve on the cumbersome representations of financial contracts used in traditional IT systems. The ultimate goal? It should be possible for financial domain experts to author and analyse contracts without waiting for custom implementation by programmers. For example, you can write a European:\n\n```haskell\neuropean :: Date -> Contract -> Contract\neuropean t u = when (at t) (u ` or ` zero )\n```\n\nOr an American option:\n\n```haskell\namerican :: (Date, Date) -> Contract -> Contract\namerican (t1,t2) u = anytime (between t1 t2) u\n```\n\nIn just a line or two of code - and these constructs can themselves be embedded and reused in other contracts. More excitingly, we can have contracts that dynamically change over time in response to outside stimuli. Here's one that simply scales up and down with respect to some observable _volatilityIndex_.\n\n```haskell\nc7 :: Currency -> Contract\nc7 k = scale volatilityIndex (one k)\n```\n\n### Smart contracts\n\nIn July 2015, the Ethereum network was launched. Inspired by Bitcoin's distributed 'blockchain' ledger, Ethereum introduced a critical new feature: smart contracts. In addition to currency transfers, Ethereum allowed network participants to author and deploy actual programs to the blockchain. These smart contracts are now being experimentally applied in a number of areas: [prediction markets](https://gnosis.pm/), [stable currencies](https://makerdao.com/) and so on. Here's a trivial example: a contract which stores an unsigned integer. Any network participant can set or get the number.\n\n```solidity\npragma solidity ^0.4.23;\n\ncontract SimpleStorage {\n  uint storedData;\n\n  function set( uint x) public {\n    storedData = x;\n  }\n\n  function get() public constant returns ( uint ) {\n    return storedData;\n  }\n}\n```\n\nMore complex contracts can be used for transferring ETH, the Ethereum currency, and representing structures such as auctions, voting systems and ownership ledgers.\n\n### Implementing Merchant\n\nI was interested to see if the two technologies - a declarative contract language and smart contracts - could be combined in a useful way. After all, wouldn't it be useful to be able to write financial smart contracts in a totally declarative way, with no room for errors? It's all to easy to make a [nasty mistake](\u003Chttps://en.wikipedia.org/wiki/The_DAO_(organization)>) when you try to write contracts by hand.\n\nIt turned out that there had been some work in this area by the authors of [Findel](http://publications.uni.lu/bitstream/10993/30975/1/Findel_2017-03-08-CR.pdf), but I wanted to prototype an implementation with more advanced features.\n\nI re-implemented the composing contracts language as a free monadic deep embedding in Haskell, then wrote a [compiler from the contract language to the Solidity smart contract language](https://github.com/rossng/merchant/). A user can write a contract that looks like the Haskell examples above and compile it directly to Solidity or to a deployable smart contract package.\n\nOf course, that isn't quite enough: we need some way of deploying and managing these contracts on an Ethereum network. I also prototyped a [Đapp for deploying, proposing and accepting contracts](https://github.com/rossng/merchant-client). Users can upload a JSON contract description, deploy it to the network and then activate it by proposing it to another user.\n\n\u003CImage src={dappScreenshot} alt=\"Screenshot of the DApp.\" />\n\n### Evaluation\n\nIs this a viable method for writing Ethereum financial contracts? Well, not today. Ethereum has a few key limitations that make financial contracts quite hard to replicate.\n\nFirst, it cannot trigger execution of a contract autonomously. That means that contracts cannot perform an action in response to some event. A user must trigger them, at which point the contract can verify that the event has occurred and execute.\n\nSecond, there is no widely accepted mechanism for debt enforcement. My prototype implementation simply uses a signed integer balance, not an ERC-20/223 token or ETH itself, but a real world financial market needs debt to function.\n\nThe current compiler is not optimising enough for real-world use. In particular, the need to store and test the entire history of observable values is very inefficient and will quickly hit the transaction gas limit.\n\nIf you want to know more, I would of course highly recommend reading the full thesis at [ResearchGate](https://www.researchgate.net/publication/326693413_Free_Trade_Composable_Smart_Contracts) or [Internet Archive](https://archive.org/details/free-trade-composable-smart-contracts) 😉. [Get in touch](http://www.rossng.eu/about/) or create a GitHub issue if you have any questions.\n\n\u003CImage src={dappStack} alt=\"The DApp stack.\" />","src/content/posts/2018-08-10-free-trade.mdx","0cdf8c43d6efe329","2018-08-10-free-trade.mdx","2020-04-11-my-first-llvm-program",{"id":39,"data":41,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":20},{"title":42,"date":43},"My first: LLVM program\n",["Date","2020-04-11T00:00:00.000Z"],"import { Image } from \"astro:assets\";\nimport vscodeRemote from \"@assets/posts/2020-04-11-my-first-llvm-program/vscode-remote.png\";\n\nI recently started reading through Stephen Diehl's ['Implementing a JIT Compiled Language with Haskell and LLVM'](http://www.stephendiehl.com/llvm/). I thought it might be fun to write a quick experience report from my getting started with LLVM and remembering how to build and link stuff manually.\n\n## Setup\n\nI'm using Ubuntu under [WSL on Windows 10](https://docs.microsoft.com/en-us/windows/wsl/install-win10). This works nicely with VS Code's remoting system - I can use the Linux terminal directly inside VS Code on my Windows machine.\n\n\u003CImage src={vscodeRemote} alt=\"VSCode running LLVM inside WSL\" />\n\n(Side note: I [forked the Kaleidoscope repository](https://github.com/rossng/kaleidoscope/tree/9.0) to get it to compile under Stackage LTS 14.27. In any case, you won't need any Haskell code to follow this particular article!)\n\nTo get started, let's install LLVM 9 and _accoutrements_.\n\n```bash\nsudo apt install llvm-9 llvm-9-dev clang-9\n```\n\n## A trivial LLVM program\n\nLet's write a simple program that prints the character `?` to stdout. To do this, we can use the `putchar` function provided by libc.\n\n`program.ll`\n\n```llvm\ndeclare i32 @putchar(i32)\n\ndefine void @main() {\n    call i32 @putchar(i32 63)\n    ret void\n}\n```\n\nWe've just written our first program in the LLVM IR!\n\nHopefully it's fairly clear what's happening here.\n\n- First we declare that we have access to some function `putchar` that takes a 32-bit integer and returns another 32-bit integer.\n- Second we define a new function `main` that calls `putchar` with the argument `63` (the decimal ASCII code for `?`).\n\n# Running the LLVM code\n\nLLVM comes with a handy interpeter `lli` which lets us run our program directly. This is useful for testing that it works as expected without having to compile it.\n\n```bash\n$ lli-9 program.ll\n?\n```\n\nLooks like our program is working! Now let's see how we can compile it down to a proper exectuble.\n\n(Note: on my machine, it also prints an error `could not mmap JIT marker`. It's not clear exactly why.)\n\n# IR formats: text and bitcode\n\nThere are in fact two formats of LLVM IR. What we've written above uses the text representation (extension `.ll`). There is another binary representation (extension `.bc`) known as 'bitcode'.\n\nLet's see quickly how we can convert between the two formats. First, we can use [`llvm-as`](https://llvm.org/docs/CommandGuide/llvm-as.html) turn text into bitcode:\n\n```bash\n$ ls\nprogram.ll\n\n$ llvm-as-9 program.ll\n\n$ ls\nprogram.bc program.ll\n```\n\nAnd to go the other way, from bitcode to text, we use [`llvm-dis`](https://llvm.org/docs/CommandGuide/llvm-dis.html):\n\n```bash\n$ ls\nprogram.bc\n\n$ llvm-dis-9 program.bc\n\n$ ls\nprogram.bc program.ll\n```\n\nYou might have noticed that these programs are called the 'LLVM assembler' and 'LLVM disassembler'. This is a bit of a misnomer, since there is no actual native assembly involved at any point - only different formats of the LLVM IR.\n\n# Converting IR to assembly\n\nNext, we might want to convert our program from (platform-independent) LLVM IR to (native) assembly. For this, we can use [`llc`](https://llvm.org/docs/CommandGuide/llc.html).\n\nBy default, `llc` compiles to textual assembly code (`.s`). For example:\n\n```\n$ llc program.ll\n\n$ cat program.s\n        .text\n        .file   \"program.ll\"\n        .globl  main                    # -- Begin function main\n        .p2align        4, 0x90\n        .type   main,@function\nmain:                                   # @main\n        .cfi_startproc\n# %bb.0:\n        pushq   %rax\n        .cfi_def_cfa_offset 16\n        movl    $63, %edi\n        callq   putchar\n        popq    %rax\n        .cfi_def_cfa_offset 8\n        retq\n.Lfunc_end0:\n        .size   main, .Lfunc_end0-main\n        .cfi_endproc\n                                        # -- End function\n\n        .section        \".note.GNU-stack\",\"\",@progbits\n```\n\n### Object files\n\n`llc` can also be used to output object files (`.o`). These contain essentially the same content as the textual assembly, but in binary format. In fact, the difference between `.s` and `.o` files is essentially the same as the difference between `.ll` and `.bc` files.\n\nTo do this, use `llc --filetype=obj \u003Cfilename>`:\n\n```\n$ llc-9 --filetype=obj program.ll\n\n$ ls\nprogram.ll program.o\n```\n\n### Target triples\n\nOf course, there are many different platforms with many different kinds of assembly. `llc` automatically determines which to use. To see which platform is being targeted by default, run `llc --version`.\n\n```bash\n$ llc-9 --version\nLLVM (http://llvm.org/):\n  LLVM version 9.0.0\n\n  Optimized build.\n  Default target: x86_64-pc-linux-gnu\n  Host CPU: znver1\n\n  Registered Targets:\n    aarch64    - AArch64 (little endian)\n    aarch64_32 - AArch64 (little endian ILP32)\n    aarch64_be - AArch64 (big endian)\n[...]\n```\n\nYou can, however, also configure the target assembly by changing parts of the [target triplet](https://wiki.osdev.org/Target_Triplet). You can override the whole thing at once using the `-mtriple` option, or set the architecture using the `-mcpu`/`-march` options. For example, let's compile for 64-bit WebAssembly:\n\n```bash\n$ llc-9 --march wasm64 program.ll\n\n$ cat program.s\n\t.text\n\t.file\t\"program.ll\"\n\t.section\t.text.main,\"\",@\n\t.globl\tmain                    # -- Begin function main\n\t.type\tmain,@function\nmain:                                   # @main\n\t.functype\tmain () -> ()\n# %bb.0:\n\ti32.const\t63\n\ti32.call\tputchar\n\tdrop\n                                        # fallthrough-return-void\n\tend_function\n.Lfunc_end0:\n\t.size\tmain, .Lfunc_end0-main\n                                        # -- End function\n\n\t.functype\tputchar (i32) -> (i32)\n```\n\n## Linking the assembly\n\nThough we have now compiled our LLVM IR to machine code in the form of object files (`.o`), these cannot be executed. They must be linked first to produce executables.\n\nThere are a few different ways we can do this.\n\n### Linking with GCC\n\nWe can use [GCC](https://gcc.gnu.org/) to do the linking for us. Though GCC is often just seen as a 'C compiler', it's rather more magical than that and can accept all kinds of weird inputs (including, [among other things](https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html): Go (!), D and Ada).\n\nIn our case, we can actually give GCC the textual assembly:\n\n```bash\n$ gcc -o program program.s\n```\n\nor the binary object file:\n\n```bash\n$ gcc -o program program.o\n```\n\nIn both cases, it will figure out how to do the right thing to produce an executable binary.\n\n```bash\n$ ./program\n?\n```\n\n### Linking with Clang\n\nIt's not just GCC that we can use to do our linking. LLVM has a closely associated compiler, [Clang](https://clang.llvm.org/docs/ClangCommandLineReference.html), which provides very similar functionality. Lucky for us (in this case) it works exactly the same way as `gcc`.\n\n```bash\n$ clang-9 -o program program.s\n[or]\n$ clang-9 -o program program.o\n\n$ ./program\n?\n```\n\nClang can also go one better. Thanks to its close link with the LLVM project, it can also consume LLVM IR directly:\n\n```bash\n$ clang-9 -o program program.ll\n\n$ ./program\n?\n```\n\n### Manually linking\n\nIf you want to see what's going on inside GCC during linking, you can pass the `--verbose` option (`-v` for short). Here's what I get. The GCC linker is actually called `ld`, but you'll notice that a program called [`collect2`](https://gcc.gnu.org/onlinedocs/gccint/Collect2.html) is being called instead. It turns out that this is mostly a complicated alias for `ld`.\n\n```bash\n$ gcc --verbose -o program program.s | grep crt\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper\nOFFLOAD_TARGET_NAMES=nvptx-none\nOFFLOAD_TARGET_DEFAULT=1\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 7.5.0-3ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)\nCOLLECT_GCC_OPTIONS='-v' '-o' 'program' '-mtune=generic' '-march=x86-64'\n as -v --64 -o /tmp/ccpdizFX.o program.s\nGNU assembler version 2.30 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.30\nCOMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-v' '-o' 'program' '-mtune=generic' '-march=x86-64'\n /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccBjbrLv.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o program /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. /tmp/ccpdizFX.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o\nCOLLECT_GCC_OPTIONS='-v' '-o' 'program' '-mtune=generic' '-march=x86-64'\nross@golem-windows:/mnt/d/Development/Haskell/kaleidoscope/src/chapter1$ gcc --verbose -o program program.s\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper\nOFFLOAD_TARGET_NAMES=nvptx-none\nOFFLOAD_TARGET_DEFAULT=1\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 7.5.0-3ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)\nCOLLECT_GCC_OPTIONS='-v' '-o' 'program' '-mtune=generic' '-march=x86-64'\n as -v --64 -o /tmp/ccY5JS3x.o program.s\nGNU assembler version 2.30 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.30\nCOMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-v' '-o' 'program' '-mtune=generic' '-march=x86-64'\n /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccFWGnuo.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o program /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. /tmp/ccY5JS3x.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o\nCOLLECT_GCC_OPTIONS='-v' '-o' 'program' '-mtune=generic' '-march=x86-64'\n```\n\nOnce upon a time, linking your object file was perhaps as simple as calling:\n\n```bash\n$ ld -o output /lib/crt0.o program.o -lc\n```\n\nThis tells `ld` to how to link your object file (`program.o`):\n\n- `/lib/crt0.o`: against `crt0.o` (the C runtime library)\n- `-lc` against libc (the C standard library)\n\nUnfortunately, a bit of cruft has stacked up since then. Here's the smallest command I managed to get working.\n\n```bash\n$ ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o program /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. program.o -lc /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o\n```\n\nYikes! Probably best to just use `gcc`.\n\nClang provides a similar `--verbose` option. Here's the output on my system:\n\n```bash\n$ clang-9 -v -o program program.oclang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)\nTarget: x86_64-pc-linux-gnu\nThread model: posix\nInstalledDir: /usr/bin\nFound candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/7\nFound candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0\nFound candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/8\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.5.0\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/8\nSelected GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\n \"/usr/bin/ld\" -z relro --hash-style=gnu --build-id --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o program /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../x86_64-linux-gnu/crt1.o /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../x86_64-linux-gnu/crti.o /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/crtbegin.o -L/usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0 -L/usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../x86_64-linux-gnu -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../.. -L/usr/lib/llvm-9/bin/../lib -L/lib -L/usr/lib program.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/crtend.o /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../x86_64-linux-gnu/crtn.o\n```\n\nAmusingly, despite LLVM having its own linker [`lld`](https://lld.llvm.org/), it seems that Clang actually just calls the GNU linker `ld` under the hood. `lld` is more or less undocumented, so I didn't try to get it working.\n\n## Conclusion\n\nSo there you go - a quick introduction to writing and compiling a program in LLVM IR. You can also find more detailed docs on the [LLVM website](https://llvm.org/docs/GettingStarted.html).\n\n## Cheatsheet\n\n### File formats\n\n- `.ll` - LLVM IR (textual)\n- `.bc` - LLVM IR (binary)\n- `.s` - native assembly, not linked (textual)\n- `.o` - native assembly, not linked (binary)","src/content/posts/2020-04-11-my-first-llvm-program.mdx","232bb1e54fafe0c8","2020-04-11-my-first-llvm-program.mdx","2024-09-10-too-many-open-files",{"id":48,"data":50,"body":53,"filePath":54,"digest":55,"legacyId":56,"deferredRender":20},{"title":51,"date":52},"Too many open files (os error 24)\n",["Date","2024-09-10T00:00:00.000Z"],"Sometimes you might encounter an error message like this:\n\n```\nToo many open files (os error 24)\n```\n\nToo many open files? That seems clear enough. A bit of googling&mdash;or prodding of your preferred LLM&mdash;will tell you that\nthis is caused by the nofiles ulimit. Easy to solve. Except you then increase that limit to something huge like a million, and the error doesn't go away.\n\nThere is another possibility: in your application you are watching files for changes, and you are hitting a different\nlimit. File watching on Linux (generally) uses inotify internally, and that has its own limits (which are helpfully configured in a completely different\nplace). Those limits are `max_user_instances`, `max_user_watches` and `max_queued_events` ([see inotify(7) man for more details](https://man7.org/linux/man-pages/man7/inotify.7.html)).\n\nYou can manually set these limits using `sysctl`. For example:\n\n```sh\nsysctl -w fs.inotify.max_user_instances=8192\n```\n\nI ran into this because `max_user_instances` [defaults to 128](https://github.com/NixOS/nixpkgs/issues/36214)(!) on NixOS.\nAs an ivory tower-enjoying NixOS user, you will of course instead want to set your limits like this:\n\n```nix\nboot.kernel.sysctl = {\n    \"fs.inotify.max_user_instances\" = \"8192\";\n};\n```","src/content/posts/2024-09-10-too-many-open-files.mdx","863f3af8dcaabaf6","2024-09-10-too-many-open-files.mdx","2025-01-05-muural",{"id":57,"data":59,"body":62,"filePath":63,"digest":64,"legacyId":65,"deferredRender":20},{"title":60,"date":61},"Generating brick walls\n",["Date","2025-01-05T00:00:00.000Z"],"import { Image } from \"astro:assets\";\nimport screenshot1 from \"@assets/posts/2025-01-05-muural/screenshot-1.png\";\nimport screenshot2 from \"@assets/posts/2025-01-05-muural/screenshot-2.png\";\n\nI've spent a lot of the last couple of years thinking about brick walls, thanks to having been working at [Monumental](https://www.monumental.co/) that whole time.\n\nI thought it would be fun to make a little toy that lets you build your own (virtual) brick wall at home.\n\n\u003CImage src={screenshot1} alt=\"Screenshot of a Flemish bond brick wall\" />\n\nBricks can be laid in many different patterns, known as ['bonds'](https://en.wikipedia.org/wiki/Brickwork#Load-bearing_bonds). At first it looks like all these bonds can be expressed in a fairly simple way, but it's surprisingly fiddly to make things line up nicely and fill left over space in a way that complies with the bond pattern.\n\nAnyway, I've ignored all of that and just tried to express bonds in the [easiest way possible](https://github.com/rossng/muural/blob/708799bc1fba81ab2e3dfc07f685d448e9f67729/src/data/Bonds.ts).\n\n[Try it out!](https://rossng.eu/muural/)\n\n\u003CImage src={screenshot2} alt=\"Screenshot of a Flemish diagonal bond wall\" />\n\nWant to do this full time, but also it's robots and in 3D? [Have a look at our open positions](https://www.monumental.co/jobs).","src/content/posts/2025-01-05-muural.mdx","42c12a2291af3b58","2025-01-05-muural.mdx","2024-11-27-mit-license-with-disney-clause",{"id":66,"data":68,"body":71,"filePath":72,"digest":73,"legacyId":74,"deferredRender":20},{"title":69,"date":70},"MIT License with Disney Clause\n",["Date","2024-11-27T00:00:00.000Z"],"A while back I read about [Disney's dismissal attempt against a court case](https://www.theguardian.com/film/article/2024/aug/15/disney-wrongful-death-lawsuit-dismissal) concerning someone's death due to an allergic reaction after they ate at a restaurant in a Disney theme park.\n\nTheir justification for this? The person bringing the case had previously signed up for Disney+ and, in doing so, had agreed to waive their right to sue Disney. (Yes, this is somehow often legally binding in the USA.)\n\nPerhaps it would be good for large corporations to remember that they also benefit significantly from existing in a society that treats them fairly.\n\nIn any case, I present to you a new, potentially legally-inadvisable, licence for open source software.\n\n\n> MIT License with Disney Clause\n> \n> Copyright (c) [Year] [Author Name]\n> \n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n> \n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n> \n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n> \n> As an express condition of using this Software, all directors, officers, and members of the board of The Walt Disney Company and its subsidiary or constituent companies shall surrender the entirety of their personal assets annually to a charitable organization designated by the author(s) of this Software. Failure to comply with this clause constitutes a violation of the license terms, rendering this license null and void for the aforementioned individuals and entities. \n\n(It should be noted that, after significant public pressure, Disney did decide to backtrack on their attempt to have the case dismissed.)","src/content/posts/2024-11-27-mit-license-with-disney-clause.mdx","7abbe1669e87556c","2024-11-27-mit-license-with-disney-clause.mdx"]